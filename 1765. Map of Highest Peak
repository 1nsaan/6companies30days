class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int n= isWater.length;
        int m = isWater[0].length;
        int height[][] = new int[isWater.length][isWater[0].length];
        for(int [] row : height)  Arrays.fill(row,Integer.MAX_VALUE);
        Queue<Pair> water = new LinkedList<>();
        for(int i=0;i<isWater.length;i++){
            for(int j=0;j<isWater[0].length;j++){
                    if(isWater[i][j]==1) {
                            water.add(new Pair(i,j)); 
                            height[i][j]=0;
                    } 
            }
        }
       
        while(!water.isEmpty()){
            Pair curr = water.poll();
            int r = curr.i;
            int c = curr.j;
          int[] dr = {1, 0, -1, 0};
          int[] dc = {0, 1 ,0, -1};
            for(int i=0;i<4;i++){
                int nr = r + dr[i];
                int nc = c+dc[i];
            if(nr>=0 && nc>=0 && nr<n && nc < m && height[nr][nc] > 1 + height[r][c])
                   {
                       height[nr][nc] = 1 + height[r][c];
                       water.add(new Pair(nr,nc));
                   }
            }
            
        }


           return height;
        
  }    
}

class Pair {
    int i;
    int j;
    Pair(int i,int j){
        this.i = i;
        this.j = j;
    }
}
